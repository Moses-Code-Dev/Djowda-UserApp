name: AI Issue Triage Gate 1

on:
  issues:
    types: [opened, edited]

permissions:
  issues: write
  contents: read
  models: read   # must include this to use GitHub Models :contentReference[oaicite:3]{index=3}

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:
      - name: Use GitHub Models to classify issue
        id: classify
        uses: github/ai-inference@v1  # hypothetical official GitHub Models inference action
        with:
          model: gpt-4o-mini  # or whatever model available in your repo/org
          input: |
            You are triaging issues for the Djowda platform.
            Classify if the issue is "legit" (clear bug/feature request with enough detail)
            or "not_legit" (spam, incomplete, missing steps).
            Return exactly one word: legit or not_legit.
            Issue Title: ${{ github.event.issue.title }}
            Issue Body: ${{ github.event.issue.body }}

      - name: Comment for legit issue
        if: steps.classify.outputs.result == 'legit'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "👋 Thank you for your contribution to the Djowda platform! 🎉 Your issue has been marked as **valid**. The team will take a look soon."
            })

      - name: Add label as triaged
        if: steps.classify.outputs.result == 'legit'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['triaged']
            })
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'needs-info'
            }).catch(() => {})

      - name: Comment for not legit issue
        if: steps.classify.outputs.result == 'not_legit'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "⚠️ Thanks for opening an issue! It looks like some important details may be missing.\n\nPlease update it with:\n- Steps to reproduce\n- Expected behavior\n- Component (User App, Store App, Farmer App, etc.)"
            })

      - name: Add label as needs-info
        if: steps.classify.outputs.result == 'not_legit'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['needs-info']
            })
            github.rest.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'triaged'
            }).catch(() => {})
