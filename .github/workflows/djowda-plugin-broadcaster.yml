name: Djowda Plugin Broadcaster

permissions:
  contents: read

on:
  push:
    branches:
      - main
    paths:
      - "DjowdaMap/**"

jobs:
  broadcast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source repo
        uses: actions/checkout@v4

      - name: Read target repos list
        id: read_repos
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat repos.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup Git identity
        run: |
          git config --global user.name "Djowda Broadcaster Bot"
          git config --global user.email "djowda-bot@users.noreply.github.com"

      - name: Configure direct GitHub authentication
        env:
          SYNC_TOKEN: ${{ secrets.DJOWDA_SYNC_TOKEN }}
        run: |
          set -euo pipefail
          # Use token for all git/https operations
          git config --global url."https://${SYNC_TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Install GitHub CLI
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi

      - name: Sync DjowdaMap module and create PRs
        env:
          SYNC_TOKEN: ${{ secrets.DJOWDA_SYNC_TOKEN }}
          GH_TOKEN: ${{ secrets.DJOWDA_SYNC_TOKEN }}
        run: |
          set -euo pipefail

          while IFS= read -r repo || [ -n "$repo" ]; do
            [ -z "$repo" ] && continue
            echo "üîÅ Syncing DjowdaMap to $repo ..."

            # Normalize repo path (owner/repo)
            repo_path="${repo#https://github.com/}"
            repo_path="${repo_path%.git}"

            repo_name=$(basename "$repo_path")
            branch_name="djowda-sync/DjowdaMap-$(date +%s)"

            # Clone using git directly (token handled by config)
            git clone "https://github.com/${repo_path}.git" "$repo_name"
            cd "$repo_name"
            git checkout -b "$branch_name"

            mkdir -p ./DjowdaMap
            rsync -av --delete ../DjowdaMap/ ./DjowdaMap/

            git add .
            if git diff --cached --quiet; then
              echo "‚ö™ No changes detected for $repo_name, skipping..."
              cd ..
              continue
            fi

            git commit -m "Djowda Broadcaster: Sync latest DjowdaMap module"
            git push -u origin "$branch_name"

            # Create PR using gh CLI (authenticated via GH_TOKEN env var)
            gh pr create \
              --repo "$repo_path" \
              --base main \
              --head "$branch_name" \
              --title "DjowdaMap module update" \
              --body "This PR was automatically created by the Djowda Broadcaster workflow to sync the latest DjowdaMap module." \
              || echo "‚ö†Ô∏è PR creation failed or already exists for $repo_name"

            echo "‚úÖ Pull request created for $repo_name"
            cd ..
          done < repos.txt